package com.fi.crm.campaigns.web.components;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fi.crm.campaigns.web.forms.BaseForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.window.WindowMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.WindowModeChangeEvent;
import com.vaadin.ui.Window.WindowModeChangeListener;

public abstract class BaseAdminEntityComponent extends CustomComponent {

	/**
	 * 
	 */
	protected static final long serialVersionUID = 1L;

	
	/**
	 * static logger for class BaseAdminEntityComponent
	 */
	private static final Logger logger = LoggerFactory.getLogger(BaseAdminEntityComponent.class);
	
	@AutoGenerated
	protected VerticalLayout mainLayout;

	@AutoGenerated
	protected Table entityTable;
	protected HorizontalLayout layoutHeader;
	protected HorizontalLayout rowActionLayout;
	protected VerticalLayout vl;
	protected Label tittleLabel;
	protected BaseForm form;
	protected Window window;
	public final String OPERATION = "adminEntityComponent.OPERATION";

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public BaseAdminEntityComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setSpacing(true);
		mainLayout.setMargin(true);
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// entityTable
		entityTable = new Table();
		entityTable.setImmediate(false);
		entityTable.setWidth("100%");
		entityTable.setHeight("-1px");
		entityTable.setSelectable(false);
		entityTable.setMultiSelect(false);

		tittleLabel = new Label();
		layoutHeader = new HorizontalLayout();
		layoutHeader.addComponent(tittleLabel);
		layoutHeader.setComponentAlignment(tittleLabel, Alignment.MIDDLE_LEFT);
		//layoutHeader.setSpacing(true);
		layoutHeader.setWidth("100%");
		mainLayout.addComponent(layoutHeader);
		mainLayout.addComponent(entityTable);

		vl = new VerticalLayout();
		rowActionLayout = new HorizontalLayout();
		return mainLayout;
	}

	public Table getEntityTable() {
		return entityTable;
	}

	public void setEntityTable(Table entityTable) {
		this.entityTable = entityTable;
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public BaseForm getForm() {
		return form;
	}

	public void setForm(BaseForm form) {
		this.form = form;
	}

	@SuppressWarnings("serial")
	public Window openAdminForm(String name, Button okButton, String actionCancel, boolean modal, boolean resizable, boolean fullScreen) {
		window = new Window(name);
		vl = new VerticalLayout();
		window.setModal(modal);
		window.setResizable(resizable);
		vl.setSpacing(true);
		vl.setMargin(true);
		vl.setStyleName("adminEntityForm");
		vl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		if (fullScreen) {
			window.setSizeFull();
			vl.setWidth(100, Unit.PERCENTAGE);
		} else {
			vl.setSizeUndefined();
			window.setSizeUndefined();
		}
		vl.addComponent(form);
		window.setContent(vl);

		HorizontalLayout hl = new HorizontalLayout();

		hl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		hl.setSpacing(true);
		if(okButton != null){
			hl.addComponent(okButton);
		}
		Button cancelButton = new Button(actionCancel);
		cancelButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				formActionCancel(window);
			}
		});
		hl.addComponent(cancelButton);
		vl.addComponent(hl);
		window.center();

		window.addCloseListener(new Window.CloseListener() {

			@Override
			public void windowClose(CloseEvent e) {
				formActionCancel(window);
			}
		});
		UI.getCurrent().addWindow(window);
		return window;
	}

	@SuppressWarnings("serial")
	public Window openAdminForm(String name, Button okButton, Button cancelButton, boolean modal, boolean resizable, boolean fullScreen) {
		logger.debug("start openAdminForm method ");
		window = new Window(name);
		vl = new VerticalLayout();
		window.setModal(modal);
		window.setResizable(resizable);
		vl.setSpacing(true);
		vl.setMargin(true);
		vl.setStyleName("adminEntityForm");
		vl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		if (fullScreen){
			window.setSizeFull();
			vl.setWidth(100, Unit.PERCENTAGE);
		}else{
			vl.setSizeUndefined();
			window.setSizeUndefined();
		}

		vl.addComponent(form);
		vl.setExpandRatio(form, 1);
		window.setContent(vl);

		HorizontalLayout hl = new HorizontalLayout();
		hl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		hl.setSpacing(true);
		hl.addComponent(okButton);
		hl.addComponent(cancelButton);
		vl.addComponent(hl);
		window.center();
		window.setImmediate(true);
		window.addWindowModeChangeListener(new WindowModeChangeListener() {
			
			@Override
			public void windowModeChanged(WindowModeChangeEvent event) {
//				System.out.println("event.getWindowMode().equals(WindowMode.MAXIMIZED)"+event.getWindowMode().equals(WindowMode.MAXIMIZED));
				if(event.getWindowMode().equals(WindowMode.MAXIMIZED)){
//				 	form.setSizeFull();
//				 	form.setStyleName("campaigns_pop-up");
				 	vl.setWidth(100, Unit.PERCENTAGE);
				 	vl.markAsDirtyRecursive();
//					form.markAsDirty();
				}
			}

		});
		window.addCloseListener(new Window.CloseListener() {

			@Override
			public void windowClose(CloseEvent e) {
				formActionCancel(window);
			}
		});

		UI.getCurrent().addWindow(window);
		return window;
	}

	public void refreshWindow() {
		if (window != null) {
			window.markAsDirty();
			window.center();
		}
	}

	public void maximizeWindow() {
		if (window != null) {
			window.markAsDirty();
			window.setSizeFull();
		}
	}

	public Window getWindow() {
		return window;
	}

	/**
	 * @return the rowActionLayout
	 */
	public HorizontalLayout getRowActionLayout() {
		return rowActionLayout;
	}

	/**
	 * @param rowActionLayout
	 *            the rowActionLayout to set
	 */
	public void setRowActionLayout(HorizontalLayout rowActionLayout) {
		this.rowActionLayout = rowActionLayout;
	}

	/**
	 * @return the tittleLabel
	 */
	public Label getTittleLabel() {
		return tittleLabel;
	}

	/**
	 * @param tittleLabel
	 *            the tittleLabel to set
	 */
	public void setTittleLabel(Label tittleLabel) {
		this.tittleLabel = tittleLabel;
	}

	public void setWidthAndHeightTable(String width, String height){
		mainLayout.setWidth(width+"px");
		entityTable.setWidth((mainLayout.getWidth()-44)+"px");
		entityTable.setHeight(height+"px");
	}
	public abstract void formActionCancel(Window w);

}
