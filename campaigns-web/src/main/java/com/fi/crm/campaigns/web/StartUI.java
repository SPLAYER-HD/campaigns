package com.fi.crm.campaigns.web;

import java.util.HashMap;
import java.util.Locale;

import javax.servlet.annotation.WebServlet;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fi.crm.campaigns.business.services.constant.ConstantServiceInterface;
import com.fi.crm.campaigns.common.dto.ConstantDTO;
import com.fi.crm.campaigns.common.enums.ConstantsIdentifierEnum;
import com.fi.crm.campaigns.infrastructure.exception.BusinessException;
import com.fi.crm.campaigns.web.components.HeaderComponent;
import com.fi.crm.campaigns.web.extensions.CallExtension;
import com.fi.crm.campaigns.web.security.SecurityUtil;
import com.fi.crm.campaigns.web.util.Messages;
import com.fi.crm.campaigns.web.util.SessionUtil;
import com.fi.crm.campaigns.web.util.SpringContextHelper;
import com.fi.crm.campaigns.web.views.secure.HomeView;
import com.twilio.sdk.client.TwilioCapability;
import com.twilio.sdk.client.TwilioCapability.DomainException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Title;
import com.vaadin.annotations.VaadinServletConfiguration;
import com.vaadin.event.ShortcutAction;
import com.vaadin.event.ShortcutListener;
import com.vaadin.server.VaadinRequest;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

@Theme("campaignsTheme")
@Title("CampaÃ±as La Riviera")

public class StartUI extends UI {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static Logger logger = LoggerFactory.getLogger(StartUI.class);
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout loginLayout;
	@AutoGenerated
	private Panel loginPanel;
	@AutoGenerated
	private VerticalLayout loginFieldsLayout;
	@AutoGenerated
	private Button loginButton;
	@AutoGenerated
	private PasswordField passwordText;
	@AutoGenerated
	private Label passwordLabel;
	@AutoGenerated
	private TextField userText;
	@AutoGenerated
	private Label userLabel;

	private HorizontalLayout actionsLayout;

	private HeaderComponent headerComponent;

	CallExtension callExt = null;

	@Override
	protected void init(VaadinRequest request) {

		setLocale(Locale.US);
		setStyleName("background-white");
		
		System.out.println("SecurityUtil.isUserAuthenticated() >>"+SecurityUtil.isUserAuthenticated());
		if (SecurityUtil.isUserAuthenticated()) {
			setContent(new HomeView());

		} else {
			try{
			setContent(buildMainLayout());
			SpringContextHelper helper  = new SpringContextHelper(VaadinServlet.getCurrent().getServletContext());
			ConstantServiceInterface constantService = (ConstantServiceInterface) helper.getBean("constantService");
			HashMap<String, ConstantDTO> allConstants = constantService.getAllConstants();
//			String applicationSid = "AP93e7f675d14b0c97c963fe79f2782521";
//			String ACCOUNT_SID = "ACb9e31dc33733dd07d994fa914ba38a89";
//			String AUTH_TOKEN = "8c25af29d0b0a19079415af1335004cd";
			String APPLICATION_SID = allConstants.get(ConstantsIdentifierEnum.TWILIO_APPLICATION_SID.getValue()).getValue();
			String ACCOUNT_SID = allConstants.get(ConstantsIdentifierEnum.TWILIO_ACCOUNT_SID.getValue()).getValue();
			String AUTH_TOKEN = allConstants.get(ConstantsIdentifierEnum.TWILIO_AUTH_TOKEN.getValue()).getValue();

			System.out.println(APPLICATION_SID);
			System.out.println(ACCOUNT_SID);
			System.out.println(AUTH_TOKEN);
			TwilioCapability capability = new TwilioCapability(ACCOUNT_SID, AUTH_TOKEN);
			capability.allowClientOutgoing(APPLICATION_SID);
			
			String token = null;
			token = capability.generateToken();
			logger.debug("Generated token:" + token);
			callExt = new CallExtension(token);
			callExt.extend(this);
			SessionUtil.setCallExtension(callExt);
			} catch(BusinessException b){
				logger.error("");
			}catch (DomainException e) {
				logger.error("");
			}
		}
	}

	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%"); //$NON-NLS-1$
		mainLayout.setHeight("-1px"); //$NON-NLS-1$
		mainLayout.setStyleName(Reindeer.LAYOUT_WHITE);
		// top-level component properties
		setWidth("100.0%"); //$NON-NLS-1$
		setHeight("-1px"); //$NON-NLS-1$

		headerComponent = new HeaderComponent();
		headerComponent.setImmediate(false);
		headerComponent.setWidth("100.0%");
		headerComponent.setHeight("-1px");
		headerComponent.getMenuLayout().setVisible(false);
		headerComponent.getUserInfoLayout().setVisible(false);
		mainLayout.addComponent(headerComponent);

		// verticalLayout_5
		loginLayout = buildLoginLayout();
		mainLayout.addComponent(loginLayout);
		mainLayout.setComponentAlignment(loginLayout, new Alignment(48));
		// this.getUI().

		// Button callButton = new Button("Call");
		// mainLayout.addComponent(callButton);
		// callButton.addClickListener(new Button.ClickListener() {
		//
		// /**
		// *
		// */
		// private static final long serialVersionUID = 1L;
		//
		// @Override
		// public void buttonClick(ClickEvent event) {
		// logger.debug("Button clicked");
		// callExt.initCall();
		// logger.debug("init call");
		// callExt.makeCall("13163547230");
		// logger.debug("make call");
		// }
		// });
		//
		//
//		final TextField test = new TextField("cel");
//		 Button testDiego = new Button("testDiego");
//		 mainLayout.addComponent(testDiego);
//		 mainLayout.addComponent(test);
//		 testDiego.addClickListener(new Button.ClickListener() {
//		
//		 /**
//		 *
//		 */
//		 private static final long serialVersionUID = 1L;
//		
//		 @Override
//		 public void buttonClick(ClickEvent event) {
//		 logger.debug("Button clicked");
//		 SpringContextHelper helper = new
//		 SpringContextHelper(VaadinServlet.getCurrent().getServletContext());
//		
//		 try {
//			 ConstantServiceInterface constantService= (ConstantServiceInterface) helper.getBean("constantService");
//			 HashMap<String, ConstantDTO> allConstants = constantService.getAllConstants();
//			 String user = allConstants.get(ConstantsIdentifierEnum.SMS_ITCLOUD_USER.getValue()).getValue();
//				String password = allConstants.get(ConstantsIdentifierEnum.SMS_ITCLOUD_PASSWORD.getValue()).getValue();
//				String phoneInd = allConstants.get(ConstantsIdentifierEnum.SMS_INDICATIVE.getValue()).getValue();
//				String smsUrl = allConstants.get(ConstantsIdentifierEnum.SMS_URL.getValue()).getValue();
//				String response = SendSMS.sendSMSITCloud(user, password, phoneInd, smsUrl, test.getValue() ,"getMessage()");
//				
//		 } catch (BusinessException e) {
//		 // TODO Auto-generated catch block
//		 e.printStackTrace();
//		 } catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		 logger.debug("make call");
//		 }
//		 });

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildLoginLayout() {
		// common part: create layout
		loginLayout = new VerticalLayout();
		loginLayout.setImmediate(false);
		loginLayout.setWidth("-1px"); //$NON-NLS-1$
		loginLayout.setHeight("100.0%"); //$NON-NLS-1$
		loginLayout.setMargin(true);

		// panel_3
		loginPanel = buildLoginPanel();
		loginLayout.addComponent(loginPanel);
		loginLayout.setComponentAlignment(loginPanel, Alignment.MIDDLE_CENTER);

		return loginLayout;
	}

	@AutoGenerated
	private Panel buildLoginPanel() {
		// common part: create layout
		loginPanel = new Panel();
		loginPanel.setImmediate(false);
		loginPanel.setWidth("500px"); //$NON-NLS-1$
		loginPanel.setHeight("300px"); //$NON-NLS-1$

		// verticalLayout_6
		loginFieldsLayout = buildLoginFieldsLayout();
		loginPanel.setContent(loginFieldsLayout);

		return loginPanel;
	}

	@AutoGenerated
	private VerticalLayout buildLoginFieldsLayout() {
		// common part: create layout
		loginFieldsLayout = new VerticalLayout();
		loginFieldsLayout.setImmediate(false);
		loginFieldsLayout.setWidth("100.0%"); //$NON-NLS-1$
		loginFieldsLayout.setHeight("-1px"); //$NON-NLS-1$
		loginFieldsLayout.setMargin(true);

		// label_1
		userLabel = new Label();
		userLabel.setImmediate(false);
		userLabel.setWidth("-1px"); //$NON-NLS-1$
		userLabel.setHeight("-1px"); //$NON-NLS-1$
		userLabel.setValue(Messages.getString("General.user")); //$NON-NLS-1$
		loginFieldsLayout.addComponent(userLabel);
		loginFieldsLayout.setComponentAlignment(userLabel, Alignment.MIDDLE_CENTER);

		// usuarioText
		userText = new TextField();
//		 userText.setValue("MARMAR");
		userText.setImmediate(false);
		userText.setWidth("-1px"); //$NON-NLS-1$
		userText.setHeight("-1px"); //$NON-NLS-1$
		userText.setTabIndex(1);
		userText.setRequired(true);
		userText.setMaxLength(30);
		loginFieldsLayout.addComponent(userText);
		loginFieldsLayout.setComponentAlignment(userText, Alignment.MIDDLE_CENTER);

		// label_2
		passwordLabel = new Label();
		passwordLabel.setImmediate(false);
		passwordLabel.setWidth("-1px"); //$NON-NLS-1$
		passwordLabel.setHeight("-1px"); //$NON-NLS-1$
		passwordLabel.setValue(Messages.getString("General.password")); //$NON-NLS-1$
		loginFieldsLayout.addComponent(passwordLabel);
		loginFieldsLayout.setComponentAlignment(passwordLabel, Alignment.MIDDLE_CENTER);

		// passwordText
		passwordText = new PasswordField();
//		 passwordText.setValue("123456");
		passwordText.setImmediate(false);
		passwordText.setWidth("-1px"); //$NON-NLS-1$
		passwordText.setHeight("-1px"); //$NON-NLS-1$
		passwordText.setTabIndex(2);
		passwordText.setRequired(true);
		passwordText.setMaxLength(30);

		passwordText.addShortcutListener(new ShortcutListener("Enter", ShortcutAction.KeyCode.ENTER, null) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void handleAction(Object sender, Object target) {
				if (target == passwordText) { // limit the enters to only from
												// the textfield from this form
												// factory
					loginAction();
				}
			}
		});

		loginFieldsLayout.addComponent(passwordText);
		loginFieldsLayout.setComponentAlignment(passwordText, Alignment.MIDDLE_CENTER);

		// horizontalLayout_1
		actionsLayout = buildActionsLayout();
		loginFieldsLayout.addComponent(actionsLayout);
		loginFieldsLayout.setComponentAlignment(actionsLayout, Alignment.MIDDLE_CENTER);

		return loginFieldsLayout;
	}

	private HorizontalLayout buildActionsLayout() {
		// common part: create layout
		actionsLayout = new HorizontalLayout();
		actionsLayout.setImmediate(false);
		actionsLayout.setWidth("-1px");
		actionsLayout.setHeight("-1px");
		actionsLayout.setMargin(true);

		// button_1
		loginButton = new Button();
		loginButton.setCaption(Messages.getString("General.signin"));
		loginButton.setImmediate(true);
		loginButton.setWidth("-1px");
		loginButton.setHeight("-1px");
		loginButton.addClickListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				loginAction();
			}
		});

		actionsLayout.addComponent(loginButton);
		actionsLayout.setComponentAlignment(loginButton, Alignment.MIDDLE_CENTER);

		return actionsLayout;
	}

	protected void loginAction() {
		SecurityUtil su = new SecurityUtil();
		try {
			su.login(userText.getValue(), passwordText.getValue());
			setContent(new HomeView());
		} catch (UnknownAccountException uae) {
			logger.error(uae.getMessage(), uae);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		} catch (IncorrectCredentialsException ice) {
			logger.error(ice.getMessage(), ice);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		} catch (LockedAccountException lae) {
			logger.error(lae.getMessage(), lae);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		} catch (ExcessiveAttemptsException eae) {
			logger.error(eae.getMessage(), eae);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		} catch (AuthenticationException ae) {
			logger.error(ae.getMessage(), ae);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		} catch (Exception ex) {
			logger.error(ex.getMessage(), ex);
			Notification notif = new Notification(Messages.getString("General.AuthenticationErrorCaption"),
					Messages.getString("General.AuthenticationErrorMessage"), Notification.Type.ERROR_MESSAGE);
			notif.show(UI.getCurrent().getPage());
		}
	}

	@WebServlet(urlPatterns = "/*", name = "StartUIServlet", asyncSupported = true)
	@VaadinServletConfiguration(ui = StartUI.class, productionMode = false)
	public static class StartUIServlet extends VaadinServlet {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
	}
}
