package com.fi.crm.campaigns.web.components;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;

import com.fi.crm.campaigns.common.enums.PermissionEnum;
import com.fi.crm.campaigns.web.security.SecurityUtil;
import com.fi.crm.campaigns.web.util.Messages;
import com.fi.crm.campaigns.web.util.SessionUtil;
import com.fi.crm.campaigns.web.views.secure.AuthorAdminView;
import com.fi.crm.campaigns.web.views.secure.CampaignAdminView;
import com.fi.crm.campaigns.web.views.secure.MyCampaignsAdminView;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.VerticalLayout;

public class HeaderComponent  extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout menuLayout;
	@AutoGenerated
	private MenuBar menuBar;
	@AutoGenerated
	private HorizontalLayout topLayout;
	@AutoGenerated
	private VerticalLayout userInfoLayout;
	@AutoGenerated
	private HorizontalLayout lastAccessLayout;
	@AutoGenerated
	private Label lastAccessText;
	@AutoGenerated
	private Label lastAccessLabel;
	@AutoGenerated
	private HorizontalLayout terminalLayout;
	@AutoGenerated
	private Label terminalText;
	@AutoGenerated
	private Label terminalLabel;
	@AutoGenerated
	private HorizontalLayout userNameLayout;
	@AutoGenerated
	private Label userText;
	@AutoGenerated
	private Label userLabel;
	@AutoGenerated
	private Label appNameLabel;
	@AutoGenerated
	private Embedded logoEmbedded;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public HeaderComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public HorizontalLayout getMenuLayout() {
		return menuLayout;
	}

	public void setMenuLayout(HorizontalLayout menuLayout) {
		this.menuLayout = menuLayout;
	}

	public VerticalLayout getUserInfoLayout() {
		return userInfoLayout;
	}

	public void setUserInfoLayout(VerticalLayout userInfoLayout) {
		this.userInfoLayout = userInfoLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		//mainLayout.setHeight("120px");
		mainLayout.setMargin(false);
		mainLayout.setStyleName("header");

		// top-level component properties
		setWidth("100.0%");
		//setHeight("150px");

		// topLayout
		topLayout = buildTopLayout();
		mainLayout.addComponent(topLayout);

		// menuLayout
		menuLayout = buildMenuLayout();
		mainLayout.addComponent(menuLayout);
		mainLayout.setComponentAlignment(menuLayout, Alignment.BOTTOM_RIGHT);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildTopLayout() {
		// common part: create layout
		topLayout = new HorizontalLayout();
		topLayout.setImmediate(false);
		topLayout.setWidth("100.0%");
		//topLayout.setHeight("-1px");
		topLayout.setMargin(true);
		topLayout.setMargin(new MarginInfo(true, true, false, true));

		// logoEmbedded
		logoEmbedded = new Embedded();
		logoEmbedded.setImmediate(false);
		logoEmbedded.setWidth("-1px");
		logoEmbedded.setHeight("-1px");
		logoEmbedded
		.setSource(new ThemeResource("img/lariviera-logo-md.png"));
		logoEmbedded.setType(1);
		logoEmbedded.setMimeType("image/png");

		topLayout.addComponent(logoEmbedded);
		topLayout.setComponentAlignment(logoEmbedded, Alignment.MIDDLE_LEFT);

		// appNameLabel
		appNameLabel = new Label();
		appNameLabel.setImmediate(false);
		appNameLabel.setWidth("-1px");
		appNameLabel.setHeight("-1px");
		appNameLabel.setValue(Messages.getString("General.appName"));
		appNameLabel.setStyleName("appName");

		topLayout.addComponent(appNameLabel);
		topLayout.setComponentAlignment(appNameLabel, Alignment.MIDDLE_CENTER);

		// userInfoLayout
		userInfoLayout = buildUserInfoLayout();
		topLayout.addComponent(userInfoLayout);
		topLayout.setComponentAlignment(userInfoLayout, Alignment.MIDDLE_RIGHT);

		return topLayout;
	}

	@AutoGenerated
	private VerticalLayout buildUserInfoLayout() {
		// common part: create layout
		userInfoLayout = new VerticalLayout();
		userInfoLayout.setImmediate(false);
		userInfoLayout.setWidth("-1px");
		userInfoLayout.setHeight("-1px");
		userInfoLayout.setMargin(false);

		// userNameLayout
		userNameLayout = buildUserNameLayout();
		userInfoLayout.addComponent(userNameLayout);

		return userInfoLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildUserNameLayout() {

		// common part: create layout
		userNameLayout = new HorizontalLayout();
		userNameLayout.setImmediate(false);
		userNameLayout.setWidth("-1px");
		userNameLayout.setHeight("-1px");
		userNameLayout.setMargin(false);
		userNameLayout.setSpacing(true);

		// userLabel
		userLabel = new Label();
		userLabel.setImmediate(false);
		userLabel.setWidth("120px");
		userLabel.setHeight("-1px");
		userLabel.setValue(Messages.getString("General.loggedUser"));
		userLabel.setStyleName("infoUsuarioLabel");
		userNameLayout.addComponent(userLabel);
		userNameLayout.setComponentAlignment(userLabel, Alignment.MIDDLE_RIGHT);

		//Subject currentUser = SecurityUtils.getSubject();


		// userText
		userText = new Label();
		userText.setImmediate(false);
		userText.setWidth("250px");
		userText.setHeight("-1px");
		if(SessionUtil.getUserInfo() != null) {
			userText.setValue(SessionUtil.getUserInfo().getFullName());
		}
		userText.setStyleName("infoUsuarioText");
		userNameLayout.addComponent(userText);
		userNameLayout.setComponentAlignment(userText, Alignment.MIDDLE_LEFT);
		
		return userNameLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMenuLayout() {
		// common part: create layout
		menuLayout = new HorizontalLayout();
		menuLayout.setImmediate(false);
		menuLayout.setWidth("-1px");
		menuLayout.setHeight("-1px");
		menuLayout.setMargin(false);
		menuLayout.setSpacing(false);

		// menuBar
		menuBar = new MenuBar();
		menuBar.setImmediate(false);
		menuBar.setWidth("100.0%");
		menuBar.setHeight("-1px");
		menuLayout.addComponent(menuBar);

		// Define a common menu command for all the menu items.
		MenuBar.Command myCommand = new MenuBar.Command() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void menuSelected(MenuItem selectedItem) {
				processMenuSelection(selectedItem.getText());
			}  
		};

		Subject currentUser = SecurityUtils.getSubject();

		if(currentUser.isPermitted(PermissionEnum.CAMPAIGN_ADMIN_VIEW.toString())
				|| currentUser.isPermitted(PermissionEnum.AUTHORS_ADMIN_VIEW.toString())
				|| currentUser.isPermitted(PermissionEnum.MY_CAMPAIGN_VIEW.toString())){

			MenuBar.MenuItem campaignsMenu = menuBar.addItem(Messages.getString("header.menu.campaigns"), null, null);

			if(currentUser.isPermitted(PermissionEnum.CAMPAIGN_ADMIN_VIEW.toString()))
				campaignsMenu.addItem(Messages.getString("header.menu.campaigns.admin"), null, myCommand);

			if(currentUser.isPermitted(PermissionEnum.AUTHORS_ADMIN_VIEW.toString()))
				campaignsMenu.addItem(Messages.getString("header.menu.authors.admin"), null, myCommand);

			if(currentUser.isPermitted(PermissionEnum.MY_CAMPAIGN_VIEW.toString()))
				campaignsMenu.addItem(Messages.getString("header.menu.campaigns.myCampaigns"), null, myCommand);

		}

		/*
		if(currentUser.isPermitted(PermissionEnum.FILES_UPLOAD.getValor()) || 
				currentUser.isPermitted(PermissionEnum.FILES_VIEW.getValor())) {
			// Put some items in the menu hierarchically
			MenuBar.MenuItem files =
					menuBar.addItem(Messages.getString("HeaderComponent.menu.files"), null, null);
			if(currentUser.isPermitted(PermissionEnum.FILES_UPLOAD.getValor())) {
				files.addItem(Messages.getString("HeaderComponent.menu.files.upload"), null, myCommand);				
			}

			if(currentUser.isPermitted(PermissionEnum.FILES_VIEW.getValor())) {
				files.addItem(Messages.getString("HeaderComponent.menu.files.list"), null, myCommand);
			}
		}

		if(currentUser.isPermitted(PermissionEnum.AGREEMENTS_ADMIN.getValor()) || 
				currentUser.isPermitted(PermissionEnum.USERS_ADMIN.getValor()) ||
				currentUser.isPermitted(PermissionEnum.AUDIT_VIEW.getValor())) {
			// Put some items in the menu hierarchically
			MenuBar.MenuItem settings =
					menuBar.addItem(Messages.getString("HeaderComponent.menu.settings"), null, null);

			if(currentUser.isPermitted(PermissionEnum.AGREEMENTS_ADMIN.getValor())) {
				settings.addItem(Messages.getString("HeaderComponent.menu.settings.agreements"), null, myCommand);
			}

			if(currentUser.isPermitted(PermissionEnum.USERS_ADMIN.getValor())) {
				settings.addItem(Messages.getString("HeaderComponent.menu.settings.users"), null, myCommand);
			}

			if(currentUser.isPermitted(PermissionEnum.AUDIT_VIEW.getValor())) {
				settings.addItem(Messages.getString("HeaderComponent.menu.settings.audit"), null, myCommand);
			}
			//settings.addItem(Messages.getString("HeaderComponent.menu.settings.destroyInfo"), null, myCommand);
		}*/
		// Put some items in the menu hierarchically
		menuBar.addItem(Messages.getString("General.menu.exit"), null, myCommand);

		return menuLayout;
	}

	/**
	 * @param text
	 */
	protected void processMenuSelection(String text){

		if(Messages.getString("header.menu.campaigns.admin").equals(text))
			this.getUI().setContent(new CampaignAdminView());
		else if(Messages.getString("header.menu.authors.admin").equals(text))
			this.getUI().setContent(new AuthorAdminView());
		else if(Messages.getString("header.menu.campaigns.myCampaigns").equals(text))
			this.getUI().setContent(new MyCampaignsAdminView());
		/*} else if( Messages.getString("HeaderComponent.menu.payroll.reports").equals(text) ) {
			this.getUI().setContent(new PayrollReportsView());
		} else if( Messages.getString("HeaderComponent.menu.files.upload").equals(text) ) {
			this.getUI().setContent(new FilesView());
		} else if( Messages.getString("HeaderComponent.menu.files.list").equals(text) ) {
			this.getUI().setContent(new FilesView());
		} else if( Messages.getString("HeaderComponent.menu.settings.users").equals(text) ) {
			this.getUI().setContent(new SettingsUsersView());
		} else if( Messages.getString("HeaderComponent.menu.settings.agreements").equals(text) ) {
			this.getUI().setContent(new SettingsAgreementsView());
		} else if( Messages.getString("HeaderComponent.menu.settings.audit").equals(text) ) {
			this.getUI().setContent(new SettingsAuditView());
		} else if( Messages.getString("HeaderComponent.menu.settings.destroyInfo").equals(text) ) {
			this.getUI().setContent(new SettingsDestroyInfoView());
		} else */else if( Messages.getString("General.menu.exit").equals(text)){
			SecurityUtil securityUtil = new SecurityUtil();
			securityUtil.logout();
		}
		//this.getUI().setContent(new HomeView());
	}
}