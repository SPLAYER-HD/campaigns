package com.fi.crm.campaigns.web.components;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fi.crm.campaigns.web.util.CommonUtil;
import com.fi.crm.campaigns.web.util.Messages;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Notification;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;

public abstract class AdminEntityComponent extends BaseAdminEntityComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private NativeButton editButton;
	private NativeButton deleteButton;
	private NativeButton addButton;
	private boolean addEnabled = true;
	private boolean editEnabled = true;
	private boolean deleteEnabled = true;

	public static final String CMD_ADD = "ADD";
	public static final String CMD_EDIT = "EDIT";
	public static final String CMD_DELETE = "DELETE";
	private static final Logger LOGGER = LoggerFactory.getLogger(AdminEntityComponent.class);

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public AdminEntityComponent() {
		buildMainLayout();
	}

	@SuppressWarnings("serial")
	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		addButton = new NativeButton();
		addButton.setDescription(Messages.getString("General.new"));
		//addButton.setIcon(new ThemeResource("images/add-icon.png"));
		addButton.setIcon(FontAwesome.PLUS);
		addButton.setStyleName("link-transparent");
		addButton.setImmediate(false);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		addButton.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				addButtonAction();

			}
		});

		layoutHeader.addComponent(addButton);
		layoutHeader.setComponentAlignment(addButton, Alignment.MIDDLE_RIGHT);
		return mainLayout;
	}

	@SuppressWarnings("serial")
	public void openAdminForm(String name, String cmd, boolean modal, boolean resizable, boolean fullScreen) {

		window = new Window(name);

		window.setModal(modal);
		window.setResizable(resizable);
		VerticalLayout vl = new VerticalLayout();
		vl.setSpacing(true);
		vl.setMargin(true);
		vl.setStyleName("adminEntityForm");
		vl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		if (fullScreen) {
			window.setSizeFull();
			vl.setWidth(100, Unit.PERCENTAGE);
		} else {
			vl.setSizeUndefined();
			window.setSizeUndefined();
		}
		window.setContent(vl);

		String actionOk;
		String actionCancel;
		HorizontalLayout hl = new HorizontalLayout();

		Button okButton = new Button();
		Button cancelButton = new Button();

		if (CMD_ADD.equals(cmd)) {

			LOGGER.debug("CMD_ADD AdminEntityComponent!! " + form.getClass());
			vl.addComponent(form);
			actionOk = Messages.getString("General.save");
			actionCancel = Messages.getString("General.cancel");

			okButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (CommonUtil.validate(form)) {
						addButtonActionComplete(window);
					} else {
						CommonUtil.showNotification(Messages.getString("General.ValidationErrorCaption"),Messages.getString("General.ValidationErrorMessage"), Notification.Type.WARNING_MESSAGE);
					} 
				}
			});

			cancelButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					formActionCancel(window);
				}
			});

		} else if (CMD_EDIT.equals(cmd)) {
			vl.addComponent(form);
			actionOk = Messages.getString("General.save");
			actionCancel = Messages.getString("General.cancel");

			okButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					if (CommonUtil.validate(form)) {
						editItemActionComplete(window);
					} else {
						CommonUtil.showNotification(Messages.getString("General.ValidationErrorCaption"),Messages.getString("General.ValidationErrorMessage"), Notification.Type.WARNING_MESSAGE);
					}
				}
			});

			cancelButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					formActionCancel(window);
				}
			});

		}else if (CMD_DELETE.equals(cmd)){

			vl.addComponent(new Label(String.format(Messages.getString("General.delete"), form.toString())));
			actionOk = Messages.getString("General.yes");
			actionCancel = Messages.getString("General.cancel");

			okButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					deleteItemActionComplete(window);
				}
			});

			cancelButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					formActionCancel(window);
				}
			});
		} else {
			return;
		}

		okButton.setCaption(actionOk);
		cancelButton.setCaption(actionCancel);

		hl.setDefaultComponentAlignment(Alignment.MIDDLE_CENTER);
		hl.setSpacing(true);
		hl.addComponent(okButton);
		hl.addComponent(cancelButton);
		vl.addComponent(hl);
		window.center();

		window.addCloseListener(new Window.CloseListener() {

			@Override
			public void windowClose(CloseEvent e) {
				formActionCancel(window);
			}
		});
		UI.getCurrent().addWindow(window);
	}

	public void openAdminForm(String name, String cmd) {
		openAdminForm(name, cmd, true, false, false);
	}

	public boolean isAddEnabled() {
		return addEnabled;
	}

	public void setNewEnabled(boolean addEnabled) {
		this.addEnabled = addEnabled;
		if( !addEnabled ) {
			layoutHeader.removeComponent( addButton );
		}
	}

	public boolean isEditEnabled() {
		return editEnabled;
	}

	public void setEditEnabled(boolean editEnabled) {
		this.editEnabled = editEnabled;
	}

	public boolean isDeleteEnabled() {
		return deleteEnabled;
	}

	public void setDeleteEnabled(boolean deleteEnabled) {
		this.deleteEnabled = deleteEnabled;
	}

	/**
	 * @return the editButton
	 */
	public NativeButton getEditButton() {
		return editButton;
	}

	/**
	 * @param editButton
	 *            the editButton to set
	 */
	public void setEditButton(NativeButton editButton) {
		this.editButton = editButton;
	}

	/**
	 * @return the deleteButton
	 */
	public NativeButton getDeleteButton() {
		return deleteButton;
	}

	/**
	 * @param deleteButton
	 *            the deleteButton to set
	 */
	public void setDeleteButton(NativeButton deleteButton) {
		this.deleteButton = deleteButton;
	}

	@SuppressWarnings("serial")
	public void buildRowActionLayout(final Object data) {

		rowActionLayout = new HorizontalLayout();
		rowActionLayout.setSpacing(true);
		rowActionLayout.setWidth("-1px");

		if (deleteEnabled) {

			deleteButton = new NativeButton();			
			deleteButton.setDescription(Messages.getString("General.delete.button"));
			//deleteButton.setIcon(new ThemeResource("images/delete-icon.png"));
			//FontAwesome.COMMENTS
			deleteButton.setIcon(FontAwesome.ERASER);
			deleteButton.setStyleName("link-transparent");
			deleteButton.setData(data);
			deleteButton.setImmediate(false);
			deleteButton.setWidth("-1px");
			deleteButton.setHeight("-1px");
			deleteButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {

					deleteItemAction(event.getButton().getData());

				}
			});
			rowActionLayout.addComponent(deleteButton);
		}

		if (editEnabled) {
			editButton = new NativeButton();
			editButton.setDescription(Messages.getString("General.edit.button"));
			//editButton.setIcon(new ThemeResource("images/edit-icon.png"));
			editButton.setIcon(FontAwesome.EDIT);
			editButton.setStyleName("link-transparent");
			editButton.setData(data);
			editButton.setImmediate(false);
			editButton.setWidth("-1px");
			editButton.setHeight("-1px");
			editButton.addClickListener(new Button.ClickListener() {

				@Override
				public void buttonClick(ClickEvent event) {
					editItemAction(event.getButton().getData());
				}
			});

			rowActionLayout.addComponent(editButton);
		}
	}

	public abstract void addButtonAction();

	public abstract void addButtonActionComplete(Window w);

	public abstract void deleteItemAction(Object data);

	public abstract void deleteItemActionComplete(Window w);

	public abstract void editItemAction(Object data);

	public abstract void editItemActionComplete(Window w);

}