[main] 
#shiro.loginUrl = /unsecure#login
# realm to be used
saltedJdbcRealm=com.fi.crm.campaigns.web.security.DatabaseRealm
# any object property is automatically configurable in Shiro.ini file
saltedJdbcRealm.jndiDataSourceName=java:comp/env/jdbc/campaigns

# the realm should handle also authorization
saltedJdbcRealm.permissionsLookupEnabled=true 
# If not filled, subclasses of JdbcRealm assume "select password from users where username = ?"
# first result column is password, second result column is salt 
# saltedJdbcRealm.authenticationQuery = select password, digest from person where username = ?
saltedJdbcRealm.authenticationQuery = (SELECT  CLAVE_ACCESO, 'ENCRYPT' FROM pvusuarios WHERE COD_USUARIO = UPPER(?) ) UNION (SELECT CONTRASENA, NULL FROM  PD_USUARIO WHERE COD_USUARIO = UPPER(?) AND ACTIVO = 1 )
# If not filled, subclasses of JdbcRealm assume "select role_name from sgc_user_roles where username = ?"
saltedJdbcRealm.userRolesQuery = select up.PERFIL_ID from CP_USUARIO_PERFIL up where up.COD_USUARIO = UPPER(?)
# If not filled, subclasses of JdbcRealm assume "select permission from roles_permissions where role_name = ?"
saltedJdbcRealm.permissionsQuery = select ACCION from CP_PERMISO_PERFIL where PERFIL_ID = ?

#credentialsMatcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
#credentialsMatcher.storedCredentialsHexEncoded = false
#credentialsMatcher.hashIterations = 1024

credentialsMatcher = com.fi.crm.campaigns.web.util.CustomCredentialsMatcher
saltedJdbcRealm.credentialsMatcher = $credentialsMatcher

# password hashing specification
sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
sha256Matcher.hashAlgorithmName=SHA-256
sha256Matcher.hashIterations=1024
sha256Matcher.storedCredentialsHexEncoded = false
#saltedJdbcRealm.credentialsMatcher = $sha256Matcher
#saltedJdbcRealm.credentialsMatcher = $credentialsMatcher


# replace form authentication filter with verbose filter 
#authc = org.meri.simpleshirosecuredapplication.servlet.VerboseFormAuthenticationFilter
# request parameter with login error information; if not present filter assumes 'shiroLoginFailure'
#authc.failureKeyAttribute=simpleShiroApplicationLoginFailure
# specify login page
#authc.loginUrl = /simpleshirosecuredapplication/account/login.jsp
# name of request parameter with username; if not present filter assumes 'username'
#authc.usernameParam = user
# name of request parameter with password; if not present filter assumes 'password'
#authc.passwordParam = pass
# does the user wish to be remembered?; if not present filter assumes 'rememberMe'
#authc.rememberMeParam = remember
# redirect after successful login
#authc.successUrl  = /simpleshirosecuredapplication/account/personalaccountpage.jsp


# roles filter: redirect to error page if user does not have access rights
#roles.unauthorizedUrl = /simpleshirosecuredapplication/account/accessdenied.jsp

#[urls]
# force ssl for login page 
#/simpleshirosecuredapplication/account/login.jsp=ssl[8443], authc

# only users with some roles are allowed to use role-specific pages 
#/simpleshirosecuredapplication/repairmen/**=authc, roles[repairman]
#/simpleshirosecuredapplication/sales/**=authc, roles[sales]
#/simpleshirosecuredapplication/scientists/**=authc, roles[scientist]
#/simpleshirosecuredapplication/adminarea/**=authc, roles[Administrator]

# enable authc filter for all application pages
#/simpleshirosecuredapplication/**=authc